
import { useCallback } from 'react';
import { GoogleGenAI } from '@google/genai';

interface QualificationData {
  nome_completo: string;
  nome_empresa: string;
  como_conheceu_g4: string;
  faturamento_anual_aproximado: string;
  total_funcionarios_empresa: number;
  setor_empresa: string;
  principal_desafio: string;
  melhor_dia_contato_especialista: string;
  melhor_horario_contato_especialista: string;
  preferencia_contato_especialista: string;
  telefone: string;
  qualificador_nome: string;
}

interface TranscribedSegment {
  speaker: 'user' | 'ai';
  text: string;
  startTime: number;
  endTime: number;
  timestamp: Date;
}

interface QualificationLogEntry {
  timestamp: Date;
  field: string;
  oldValue: any;
  newValue: any;
  source: 'user' | 'ai' | 'system';
  confidence: 'high' | 'medium' | 'low';
}

export const usePostCallQualification = (apiKey: string) => {
  const processFullCallQualification = useCallback(async (
    transcribedSegments: TranscribedSegment[],
    onDataUpdate: (data: Partial<QualificationData>) => void,
    onLogEntry: (logEntry: QualificationLogEntry) => void
  ): Promise<void> => {
    if (!apiKey) {
      throw new Error('API key required for qualification processing');
    }

    if (transcribedSegments.length === 0) {
      console.warn('No transcribed segments to process');
      return;
    }

    try {
      const ai = new GoogleGenAI({ apiKey });

      // Build the full conversation from clean transcription
      const fullConversation = transcribedSegments
        .sort((a, b) => a.startTime - b.startTime)
        .map(segment => {
          const speaker = segment.speaker === 'user' ? 'USU√ÅRIO' : 'MARI';
          return `[${Math.floor(segment.startTime)}s] ${speaker}: ${segment.text}`;
        })
        .join('\n');

      console.log('üîç Processing post-call qualification with clean transcription');
      console.log('Full conversation:', fullConversation);

      const response = await ai.models.generateContent({
        model: 'gemini-2.5-flash-preview-05-20',
        config: {
          responseMimeType: 'application/json',
          systemInstruction: [
            {
              text: `Voc√™ √© um especialista em extra√ß√£o de dados de qualifica√ß√£o de leads brasileiros.

CONTEXTO: Esta √© uma transcri√ß√£o COMPLETA e LIMPA de uma call de qualifica√ß√£o comercial da G4 Educa√ß√£o.

TAREFA: Extraia TODAS as informa√ß√µes de qualifica√ß√£o mencionadas na conversa completa.

VANTAGENS DESTA TRANSCRI√á√ÉO:
- Transcri√ß√£o completa e precisa da call inteira
- Speaker labels corretos (USU√ÅRIO vs MARI)
- Timestamps para refer√™ncia de contexto
- Texto limpo sem erros de transcri√ß√£o em tempo real

REGRAS DE EXTRA√á√ÉO:
1. Analise a conversa COMPLETA do in√≠cio ao fim
2. Extraia informa√ß√µes tanto das falas do USU√ÅRIO quanto das confirma√ß√µes da MARI
3. Se a MARI repetiu/confirmou algo que o usu√°rio disse, use a vers√£o mais clara
4. Procure por informa√ß√µes em qualquer parte da conversa (in√≠cio, meio, fim)
5. Use "Informa√ß√£o n√£o abordada na call" apenas se realmente n√£o foi mencionado
6. Priorize clareza e completude - esta √© nossa √∫nica chance de extrair os dados

DADOS PARA EXTRAIR:
- nome_completo: Nome completo da pessoa
- nome_empresa: Nome da empresa onde trabalha
- como_conheceu_g4: Como conheceu o G4 (Instagram, indica√ß√£o, etc.)
- faturamento_anual_aproximado: Faturamento da empresa
- total_funcionarios_empresa: N√∫mero de funcion√°rios (apenas n√∫mero)
- setor_empresa: Setor de atua√ß√£o da empresa
- principal_desafio: Principal desafio mencionado
- melhor_dia_contato_especialista: Dia preferido para contato
- melhor_horario_contato_especialista: Hor√°rio preferido
- preferencia_contato_especialista: Canal preferido (WhatsApp, telefone)
- telefone: Telefone para contato
- analysis_confidence: "alta", "m√©dia" ou "baixa"
- extraction_notes: Observa√ß√µes importantes sobre a extra√ß√£o

FORMATO DE RESPOSTA (JSON):
{
  "nome_completo": "valor extra√≠do ou 'Informa√ß√£o n√£o abordada na call'",
  "nome_empresa": "valor extra√≠do ou 'Informa√ß√£o n√£o abordada na call'",
  "como_conheceu_g4": "valor extra√≠do ou 'Informa√ß√£o n√£o abordada na call'",
  "faturamento_anual_aproximado": "valor extra√≠do ou 'Informa√ß√£o n√£o abordada na call'",
  "total_funcionarios_empresa": "n√∫mero ou 'Informa√ß√£o n√£o abordada na call'",
  "setor_empresa": "valor extra√≠do ou 'Informa√ß√£o n√£o abordada na call'",
  "principal_desafio": "valor extra√≠do ou 'Informa√ß√£o n√£o abordada na call'",
  "melhor_dia_contato_especialista": "valor extra√≠do ou 'Informa√ß√£o n√£o abordada na call'",
  "melhor_horario_contato_especialista": "valor extra√≠do ou 'Informa√ß√£o n√£o abordada na call'",
  "preferencia_contato_especialista": "valor extra√≠do ou 'Informa√ß√£o n√£o abordada na call'",
  "telefone": "valor extra√≠do ou 'Informa√ß√£o n√£o abordada na call'",
  "analysis_confidence": "alta/m√©dia/baixa",
  "extraction_notes": "observa√ß√µes importantes"
}

Extraia os dados da transcri√ß√£o completa:`
            }
          ]
        },
        contents: [
          {
            role: 'user',
            parts: [
              {
                text: `TRANSCRI√á√ÉO COMPLETA DA CALL DE QUALIFICA√á√ÉO:

${fullConversation}

Extraia TODAS as informa√ß√µes de qualifica√ß√£o mencionadas nesta conversa completa e limpa.`
              }
            ]
          }
        ]
      });

      const responseText = response.text || '';
      console.log('üìä Post-call qualification response:', responseText);

      const cleanedResponse = responseText.replace(/```json\n?|\n?```/g, '').trim();
      const extractedData = JSON.parse(cleanedResponse);

      // Process the extracted data
      const updates: Partial<QualificationData> = {};
      let hasUpdates = false;

      Object.entries(extractedData).forEach(([key, value]) => {
        if (key === 'analysis_confidence' || key === 'extraction_notes') {
          return;
        }

        if (value && 
            value !== '' && 
            value !== 'Informa√ß√£o n√£o abordada na call' && 
            value !== 'null' &&
            value !== 'undefined') {
          
          // Convert total_funcionarios_empresa to number
          let processedValue = value;
          if (key === 'total_funcionarios_empresa' && typeof value === 'string') {
            const numMatch = (value as string).match(/\d+/);
            if (numMatch) {
              const numValue = parseInt(numMatch[0]);
              if (!isNaN(numValue)) {
                processedValue = numValue;
              }
            }
          }
          
          (updates as any)[key] = processedValue;
          hasUpdates = true;
          
          console.log(`‚úÖ Post-call extraction - ${key}: ${processedValue}`);
          
          onLogEntry({
            timestamp: new Date(),
            field: key,
            oldValue: null,
            newValue: processedValue,
            source: 'ai',
            confidence: extractedData.analysis_confidence === 'alta' ? 'high' : 
                      extractedData.analysis_confidence === 'm√©dia' ? 'medium' : 'low'
          });
        }
      });

      if (hasUpdates) {
        console.log('üì• Applying post-call qualification updates:', updates);
        onDataUpdate(updates);
        
        if (extractedData.extraction_notes && extractedData.extraction_notes !== 'Informa√ß√£o n√£o abordada na call') {
          onLogEntry({
            timestamp: new Date(),
            field: 'system',
            oldValue: null,
            newValue: `Post-call Notes: ${extractedData.extraction_notes}`,
            source: 'ai',
            confidence: 'high'
          });
        }
      } else {
        console.log('‚ö†Ô∏è No meaningful qualification data extracted from post-call transcription');
      }

    } catch (error) {
      console.error('‚ùå Error processing post-call qualification:', error);
      throw error;
    }
  }, [apiKey]);

  return {
    processFullCallQualification
  };
};
